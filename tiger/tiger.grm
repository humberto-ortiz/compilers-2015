structure A = Absyn
%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE
  | UMINUS

%nonterm  exp of A.exp
  | program of A.exp
  | lvalue of A.var
  | vardec of A.dec
  | tyseq of {name:Symbol.symbol,
	            ty:A.ty,
              pos:pos} list
  | tydec of {name:Symbol.symbol, ty:A.ty, pos:pos}
  | ty of A.ty
  | dec of A.dec
  | declist of A.dec list
  | expseq of (A.exp * pos) list
  | explist of A.exp list
  | fundec of A.fundec
  | funseq of A.fundec list
  | tyfield of A.field
  | tyfields of A.field list

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%right UMINUS

%%

program	: exp				(exp)

exp: lvalue (A.VarExp lvalue)

(* function calls *)
exp: ID LPAREN explist RPAREN (A.CallExp  {func=Symbol.symbol ID, args=explist, pos=IDleft})

exp: MINUS exp %prec UMINUS (A.OpExp {left=A.IntExp ~1, oper=A.TimesOp, right=exp, pos=MINUSleft})

exp: NIL		(A.NilExp)

exp: INT			(A.IntExp INT)

exp: STRING			(A.StringExp (STRING, STRINGleft))

exp: exp PLUS exp     (A.OpExp {left=exp1, oper=A.PlusOp, right=exp2, pos=PLUSleft})
exp: exp MINUS exp		(A.OpExp {left=exp1, oper=A.MinusOp, right=exp2, pos=MINUSleft})
exp: exp TIMES exp		(A.OpExp {left=exp1, oper=A.TimesOp, right=exp2, pos=TIMESleft})
exp: exp DIVIDE exp		(A.OpExp {left=exp1, oper=A.DivideOp, right=exp2, pos=DIVIDEleft})

exp: lvalue ASSIGN exp (A.AssignExp {var=lvalue, exp=exp, pos=lvalueleft})

(* let *)
exp: LET declist IN END  (A.LetExp {decs=declist, body=A.SeqExp([]), pos=LETleft})
exp: LET declist IN expseq END  (A.LetExp {decs=declist, body=A.SeqExp(expseq), pos=LETleft})

(* expression lists, for function actual arguments *)
explist: exp (exp::nil)
explist: exp COMMA explist (exp::explist)

(* lvalues *)
lvalue: ID (A.SimpleVar(Symbol.symbol ID, IDleft))

(* declarations *)
declist: dec  (dec :: nil)
declist: dec declist  (dec :: declist)

dec: vardec (vardec)
dec: tyseq (A.TypeDec tyseq)
dec: funseq (A.FunctionDec funseq)

vardec: VAR ID ASSIGN exp (A.VarDec {name=Symbol.symbol ID, init=exp,
                           pos=VARleft, escape= ref true, typ=NONE})
vardec: VAR ID COLON ID ASSIGN exp (A.VarDec {name=Symbol.symbol ID1, init=exp,
                                    pos=VARleft, escape= ref true,
                                    typ=SOME (Symbol.symbol ID2, ID2left)})

tyseq: tydec (tydec::nil)
tyseq: tydec tyseq (tydec::tyseq)

tydec: TYPE ID EQ ty ({name=Symbol.symbol ID, ty=ty, pos=TYPEleft})

ty: ID (A.NameTy (Symbol.symbol ID, IDleft))

(* formal arguments to functions *)
tyfields: tyfield (tyfield::nil)
tyfields: tyfield COMMA tyfields (tyfield::tyfields)

(* a formal argument must be typed *)
tyfield: ID COLON ID ({name = Symbol.symbol ID1,
  escape=ref true,
  typ=Symbol.symbol ID2,
  pos=ID1left})

expseq: exp ((exp, expleft) :: nil)
expseq: exp SEMICOLON expseq ((exp, expleft) :: expseq)

funseq: fundec (fundec::nil)
funseq: fundec funseq (fundec::funseq)

(* function declarations, ours must have one argument and return one value *)
(* this parser is more general, but we can skip the typechecking for more complex cases *)
fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp  ({name=Symbol.symbol ID1, params=tyfields,
                                     result=SOME(Symbol.symbol ID2, ID2left), body=exp, pos=FUNCTIONleft})
